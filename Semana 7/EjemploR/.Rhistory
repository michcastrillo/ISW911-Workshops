library(dplyr)
library(ggplot2)
library(visdat)
library(ggplot2)
library(visdat)
library(naniar)
install.packages("visdat")
install.packages("naniar")
install.packages("stringr")
library(dplyr)
library(ggplot2)
library(visdat)
library(naniar)
library(dplyr)
library(ggplot2)
library(stringr)
library(visdat)
head(datos)
head(datos)
class(datos)
datos<-read.csv(file = "Files/Pasajeros.csv",header = T,sep = ",",encoding = "UTF-8")
datos<-read.csv(file = "Files/Pasajeros.csv",header = T,sep = ",",encoding = "UTF-8")
head(datos)
colnames(datos)<-c("aeropuerto","mes","anio","nacionales","extranjeros","transito","exentos","total")
names(datos)[1]<-"aeropuerto"
datos$aeropuerto<-str_trim(str_replace(datos$aeropuerto,"Aeropuerto Internacional",""))
unique(datos$aeropuerto)
View(datos)
library(hexbin)
hist(datos$nacionales, main = "Histograma de las ventas",
xlab = "pasajeros", ylab = "Frecuencia",
col = "purple")
boxplot(datos$nacionales,boxwex=0.8)
unique(datos$aeropuerto)
nacionales_ae1<-datos %>% filter(aeropuerto=="Limón" )
boxplot(nacionales ~ anio,
col = rainbow(ncol(nacionales_ae1)),
data = nacionales_ae1,
boxwex=0.8,
main = "Nacionales por mes",
scale_y_continuous(labels=scales::comma)
)
stripchart(data=datos,nacionales ~ anio,vertical = TRUE,
method = "jitter",pch=19,add = TRUE,
col = 1:12
)
unique(datos$aeropuerto)
ggplot(datos, aes(x =aeropuerto , y = nacionales, fill = aeropuerto) ) +
geom_boxplot(alpha = 0.3, outlier.colour = "blue") +
labs(x = "Nacionales", y = "Años") +
#scale_x_discrete(labels =  c(unique(datos$aeropuerto))) +
guides(fill = FALSE) +
coord_flip() +
geom_point(stat =  "summary", fun.y = mean, shape = 16, size = 4, color = "red") +
geom_point(position = position_jitter(width = 0.1), alpha = 0.2)
valores<-datos$nacionales
valores<-na.omit(valores)
hist(valores,freq = FALSE,main = "Cambiar color", ylab = "Frecuencia", col = "lightblue")
grid(nx = NA, ny = NULL, lty = 2, col = "gray", lwd = 2)
lines(density(valores), lwd = 2, col = 'red')
lines(density(valores), col = "blue", lwd = 2)
ylim=c(0,0.004)
par(new = TRUE)
boxplot(valores, horizontal = TRUE, axes = FALSE,
lwd = 2, col = rgb(0, 1, 1, alpha = 0.15))
hist(valores, prob = TRUE,
main = "Histograma con curva normal", ylab = "Densidad", col="ivory")
options(scipen = 99999)
x <- seq(min(valores), max(valores), length = length(valores))
f <- dnorm(x, mean = mean(valores), sd = sd(valores))
lines(x, f, col = "red", lwd = 2)
lines(density(valores), lwd = 2, col = 'blue')
legend("topright", c("Histograma", "Densidad", "Normal"), box.lty = 0,
lty = 1, col = c("black", "blue", "red"), lwd = c(1, 2, 2))
par(new = TRUE)
hist(valores, prob = TRUE,
main = "Histograma con curva normal", ylab = "Densidad", col="ivory")
options(scipen = 99999)
x <- seq(min(valores), max(valores), length = length(valores))
f <- dnorm(x, mean = mean(valores), sd = sd(valores))
lines(x, f, col = "red", lwd = 2)
lines(density(valores), lwd = 2, col = 'blue')
legend("topright", c("Histograma", "Densidad", "Normal"), box.lty = 0,
lty = 1, col = c("black", "blue", "red"), lwd = c(1, 2, 2))
par(new = TRUE)
boxplot(valores, horizontal = TRUE, axes = FALSE,
lwd = 2, col = rgb(0, 1, 1, alpha = 0.15))
grupos<- datos %>% group_by(aeropuerto) %>%
summarise(totales=sum(total))
grupos
unique(datos$aeropuerto)
ggplot(grupos,aes(x=aeropuerto,y=totales,fill=aeropuerto))+
geom_bar(stat="identity")+
geom_text(aes(label = format(totales, big.mark= ".", trim = TRUE)),
position = "dodge",vjust = 0,fontface = "bold",size=5,color="blue"
)+
ggtitle("Grafico de pasajeros por aeropuerto")+
xlab("Aeropuertos") +
ylab("Totales") +
scale_y_continuous(labels=scales::comma)+
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")+
coord_flip()+
theme(legend.position = "none")
grupo01<-datos %>% filter(aeropuerto=="Juan Santamaría")
ggplot(grupo01, aes(aeropuerto, nacionales)) +
geom_boxplot(notch = TRUE,fill = "white", colour = "#3366FF")
rm(list = ls())
cat("\014")
options(encoding = "utf-8")
install.packages("rvest", dependencies = T)
library(rvest)
library(dplyr)
library(stringr)
link = "https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc"
page = read_html(link)
name = page %>% html_nodes(".lister-item-header a") %>% html_text()
year = page %>% html_nodes(".text-muted.unbold") %>% html_text()
rating = page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
synopsis = page %>% html_nodes(".ratings-bar+ .text-muted") %>% html_text()
duration = page %>% html_nodes(".lister-item-content .runtime") %>% html_text() %>% str_extract("\\d+") %>% as.integer()
gender=page %>% html_nodes(".lister-item-content .genre") %>% html_text() %>% str_remove("\\s+") %>% str_replace_all(",", "|") %>% trimws()
movies = data.frame(name, year, rating, synopsis,duration,gender, stringsAsFactors = FALSE)
write.csv(movies, "files//movies.csv")
View(movies)
get_cast = function(movie_link) {
movie_page = read_html(movie_link)
movie_cast = movie_page %>% html_nodes(".primary_photo+ td a") %>%
html_text() %>% paste(collapse = ",")
return(movie_cast)
}
get_cast = function(movie_link) {
movie_page = read_html(movie_link)
if (length(movie_page %>% html_nodes(".primary_photo+ td a")) > 0) {
movie_cast = movie_page %>% html_nodes(".primary_photo+ td a") %>%
html_text() %>% paste(collapse = ",")
} else {
movie_cast = NA
}
return(movie_cast)
}
movies = data.frame()
for (page_result in seq(from = 1, to = 201, by = 50)) {
link = paste0("https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc&start=",
page_result, "&ref_=adv_nxt")
page = read_html(link)
name = page %>% html_nodes(".lister-item-header a") %>% html_text()
movie_links = page %>% html_nodes(".lister-item-header a") %>%
html_attr("href") %>% paste("https://www.imdb.com", ., sep="")
year = page %>% html_nodes(".text-muted.unbold") %>% html_text()
rating = page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
synopsis = page %>% html_nodes(".ratings-bar+ .text-muted") %>% html_text()
#cast = sapply(movie_links, FUN = get_cast, USE.NAMES = FALSE)
duration = page %>% html_nodes(".lister-item-content .runtime") %>% html_text() %>% str_extract("\\d+") %>% as.integer()
gender=page %>% html_nodes(".lister-item-content .genre") %>% html_text() %>% str_remove("\\s+") %>% str_replace_all(",", "|") %>% trimws()
movies = rbind(movies, data.frame(name, year, rating, synopsis, duration,gender, stringsAsFactors = FALSE))
print(paste("Page:", page_result))
}
library(qdap)
install.packages("qdap")
library(qdap)
library(ggplot2)
datos$year
dim(movies)
datos<-movies
datos$year
datos<-datos %>% mutate(year=gsub("[][!#$%I()*,.:;<=>@^_`|~.{}]", "", datos$year))
datos$year<-as.numeric(datos$year)
df_gender<-datos %>% group_by(gender) %>%
summarise(total=n())
ggplot(data=df_gender, aes(x=gender, y=total)) +
geom_bar(stat="identity", position=position_dodge()) +
coord_flip() +
geom_text(aes(label=as.character(total),vjust=0))+
theme(text = element_text(size=10),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(x="", y="Total", title="Distribución por género de peliculas")
library(tidyr)
library(stringr)
conjunto <- datos %>%
mutate(gender = str_squish(str_replace_all(`gender`, "\\|", ", "))) %>%
separate_rows(gender, sep = ", ")
unique(conjunto$gender)
colores <- hcl(h = seq(0, 360, length.out = 20), c = 100, l = 65)
datos %>%
mutate(gender = str_squish(str_replace_all(`gender`, "\\|", ", "))) %>%
separate_rows(gender, sep = ", ") %>%
count(gender, sort = TRUE) %>%
ggplot(aes(x = reorder(gender, n), y = n, fill = gender)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = n), vjust = 0.5, size = 5, color = "black") +
labs(x = "Género de la película", y = "Total", title = "Distribución por género de películas") +
scale_fill_manual(values = colores) +
theme_minimal()
library(tidyr)
library(ggplot2)
df_rating<-datos %>% group_by(rating) %>%
summarise(total=n())
ggplot(data=df_rating, aes(x=rating, y=total, fill=rating)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=total), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
theme_minimal()
adventure_movies <- datos %>%
mutate(gender = str_squish(str_replace_all(`gender`, "\\|", ", "))) %>%
separate_rows(gender, sep = ", ")
adventure_movies_filtered <- adventure_movies %>%
filter(gender == "Adventure" & rating > 7)
cat("Número de filas antes de filtrar:", nrow(adventure_movies), "\n")
cat("Número de filas después de filtrar:", nrow(adventure_movies_filtered), "\n")
analisis<-datos%>% filter(rating>=7.6)
synopsis<-analisis$synopsis
library(tm)
texto<-gsub(pattern = "\\W",replace=" ",synopsis)
#Elimino numeros
texto<-gsub(pattern = "\\d",replace=" ",texto)
texto<-tolower(texto)
texto<- removeWords(texto,stopwords("english"))
texto<-gsub(pattern = "\\b[A-z]\\b{1}",replace=" ",texto)
# quitamos los espacios en blaco
texto<-stripWhitespace(texto)
texto<-tm::removePunctuation(texto)
library(wordcloud)
wordcloud(texto)
wordcloud(texto,min.freq =2,random.order = F, scale = c(4,0.5),
color = rainbow(3))
get_sentiments("afinn")
get_sentiments("afinn")
install.packages("tidytext")
library(ggplot2)
ggplot(datos_sentimiento, aes(x = sentiment, y = sentimiento, fill = sentiment)) +
geom_col() +
geom_text(aes(label = sentimiento), vjust = -0.5) +
xlab("Sentimiento") +
ylab("Cantidad de elementos") +
ggtitle("Análisis de sentimiento de los datos") +
theme(plot.title = element_text(hjust = 0.5))
datos_sentimiento <- datos_tidy %>%
inner_join(afinn, by = "word") %>%
group_by(name) %>%
summarize(sentimiento = sum(value))
get_sentiments("afinn")
library(tidytext)
get_sentiments("afinn")
